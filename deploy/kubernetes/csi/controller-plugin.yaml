# SPDX-License-Identifier: Apache-2.0

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-controller-plugin
  namespace: kubesan-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: csi-controller-plugin
  namespace: kubesan-system
spec:
  replicas: 2
  selector:
    matchLabels: &labels
      app.kubernetes.io/component: csi-controller-plugin
  template:
    metadata:
      labels: *labels
      annotations:
        kubectl.kubernetes.io/default-container: csi-plugin
    spec:
      serviceAccountName: csi-controller-plugin
      topologySpreadConstraints:
        - maxSkew: 1
          minDomains: 2
          whenUnsatisfiable: DoNotSchedule
          topologyKey: kubernetes.io/hostname
          nodeTaintsPolicy: Honor
          labelSelector:
            matchLabels: *labels
          matchLabelKeys:
            - pod-template-hash
      containers:
        - name: csi-plugin
          image: kubesan
          args:
            - csi-controller-plugin
          env:
            - name: KUBESAN_GROUP
              value: kubesan.gitlab.io
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: WATCH_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 9808
              name: healthz
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 2
          volumeMounts:
            - name: socket-dir
              mountPath: /run/csi
            - name: dev
              mountPath: /dev
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v3.5.0
          args:
            - --extra-create-metadata  # to get PVC/PV info in CreateVolume()
            - --default-fstype=ext4 # default FSType so that SecurityContext fsGroup works
            - --leader-election
            - --http-endpoint=:8081
          ports:
            - containerPort: 8081
              protocol: TCP
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /healthz/leader-election
              port: 8081
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
          volumeMounts:
            - name: socket-dir
              mountPath: /run/csi
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
        - name: csi-snapshotter
          image: registry.k8s.io/sig-storage/csi-snapshotter:v6.3.3
          args:
            - --extra-create-metadata  # to get VS/VSC info in CreateSnapshot()
            - --leader-election
            - --http-endpoint=:8082
          ports:
            - containerPort: 8082
              protocol: TCP
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /healthz/leader-election
              port: 8082
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
          volumeMounts:
            - name: socket-dir
              mountPath: /run/csi
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
        - name: liveness-probe
          image: registry.k8s.io/sig-storage/livenessprobe:v2.14.0
          volumeMounts:
            - name: socket-dir
              mountPath: /run/csi
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
        - name: csi-health-monitor
          image: registry.k8s.io/sig-storage/csi-external-health-monitor-controller:v0.14.0
          args:
            - "--enable-node-watcher=true"
            - --leader-election
            - --http-endpoint=:8083
          ports:
            - containerPort: 8083
              protocol: TCP
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /healthz/leader-election
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
          volumeMounts:
            - name: socket-dir
              mountPath: /run/csi
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
        - name: csi-resizer
          image: k8s.gcr.io/sig-storage/csi-resizer:v1.12.0
          args:
            - --handle-volume-inuse-error=true # online resize fails for linear
            - --leader-election
            - --http-endpoint=:8084
          ports:
            - containerPort: 8084
              protocol: TCP
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /healthz/leader-election
              port: 8084
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
          volumeMounts:
            - name: socket-dir
              mountPath: /run/csi
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/kubesan-controller
            type: DirectoryOrCreate
        - name: dev
          hostPath:
            path: /dev
            type: Directory
